return {
	"mfussenegger/nvim-dap",
	dependencies = {
		"rcarriga/nvim-dap-ui",
		"mfussenegger/nvim-dap-python",
		"nvim-neotest/nvim-nio",
		"theHamsta/nvim-dap-virtual-text",
	},
	config = function()
		-- require("dapui").setup()
		local path = require("mason-registry").get_package("debugpy"):get_install_path()
		require("dap-python").setup(path .. "/venv/bin/python")
		require("nvim-dap-virtual-text").setup({})

		local dap, dapui = require("dap"), require("dapui")
		dap.listeners.before.attach.dapui_config = function()
			dapui.open()
		end
		dap.listeners.before.launch.dapui_config = function()
			dapui.open()
		end
		dap.listeners.before.event_terminated.dapui_config = function()
			dapui.close()
		end
		dap.listeners.before.event_exited.dapui_config = function()
			dapui.close()
		end

		vim.keymap.set("n", "<F5>", function()
			dap.continue()
		end)
		vim.keymap.set("n", "<F10>", function()
			dap.step_over()
		end)
		vim.keymap.set("n", "<F11>", function()
			dap.step_into()
		end)
		vim.keymap.set("n", "<F12>", function()
			dap.step_out()
		end)
		vim.keymap.set("n", "<Leader>db", function()
			dap.toggle_breakpoint()
		end)
		-- vim.keymap.set("n", "<Leader>dlp", function()
		-- 	dap.set_breakpoint(nil, nil, vim.fn.input("Log point message: "))
		-- end)
		-- vim.keymap.set("n", "<Leader>dr", function()
		-- 	dap.repl.open()
		-- end)
		vim.keymap.set("n", "<Leader>dl", function()
			dap.run_last()
		end)
		vim.keymap.set("n", "<leader>dt", function()
			dap.terminate()
		end)
		vim.keymap.set({ "n", "v" }, "<Leader>dh", function()
			require("dap.ui.widgets").hover()
		end)
		vim.keymap.set({ "n", "v" }, "<Leader>dp", function()
			require("dap.ui.widgets").preview()
		end)
		-- vim.keymap.set("n", "<Leader>df", function()
		-- 	local widgets = require("dap.ui.widgets")
		-- 	widgets.centered_float(widgets.frames)
		-- end)
		vim.keymap.set("n", "<Leader>ds", function()
			local widgets = require("dap.ui.widgets")
			widgets.centered_float(widgets.scopes)
		end)
		vim.keymap.set({ "n", "v" }, "<leader>de", function()
			dapui.eval()
		end)
		-- require("dapui").setup()
		dapui.setup({
			layouts = {
				{
					elements = {
						{ id = "watches", size = 0.25 },
						{ id = "console", size = 0.25 },
						{ id = "breakpoints", size = 0.25 },
						{ id = "stacks", size = 0.20 },
						{ id = "scopes", size = 0.25 },
					},
					position = "left",
					size = 30,
				},
				{
					elements = {
						{ id = "repl", size = 1.0 },
					},
					position = "bottom",
					size = 10,
				},
			},
		})
	end,
}
